
Binary Tree Zigzag Level Order Traversal Total Accepted: 4571 Total Submissions: 17512My Submissions




Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
For example:

Given binary tree {3,9,20,#,#,15,7},


    3   / \  9  20    /  \   15   7

return its zigzag level order traversal as:


[  [3],  [20,9],  [15,7]] 

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

This question can be solved using two stacks.
Why is stack? Letâ€™s assume that you are traversing the first node of a level from left to right, which means, the left child of this node should be the last one to be visited in the next level, since it would be from right to left. To implement this LIFO feature, you have to use stack rather than queue.

At first I am using a int variable to keep track of the visiting order by judging whether it is odd or even. Another think needs to take a look is that depends on the visiting sequence, we need to push the children node in different order, so as to say, if the next order is from right to left, you need to push the left child first; and do it on the other way if next level is from left to child.

So the code would be:

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>> ();
        if(root == null) return result;
       
        Stack<TreeNode> leftToRight = new Stack<TreeNode> ();
        Stack<TreeNode> rightToLeft = new Stack<TreeNode> ();
        leftToRight.push(root);
        int i = 1;
        while(i!=0) {
            if(i % 2 ==1) {
                if(leftToRight.isEmpty()) {
                    i = 0;
                } else {
                    ArrayList<Integer> curRes = new ArrayList<Integer>();
                    while(!leftToRight.isEmpty()) {
                        TreeNode cur = leftToRight.pop();
                        curRes.add(cur.val);
                        if(cur.left!= null) rightToLeft.push(cur.left);
                        if(cur.right != null) rightToLeft.push(cur.right);
                    }
                    result.add(curRes);
                    i++;
                }
            } else {
                 if(rightToLeft.isEmpty()) {
                    i = 0;
                } else {
                    ArrayList<Integer> curRes = new ArrayList<Integer>();
                    while(!rightToLeft.isEmpty()) {
                        TreeNode cur = rightToLeft.pop();
                        curRes.add(cur.val);
                        if(cur.right!= null) leftToRight.push(cur.right);
                        if(cur.left != null) leftToRight.push(cur.left);
                    }
                    result.add(curRes);
                    i++;
                }
            }
        }
        return result;
       
       
    }
} 

This works in the leetcode OJ. However, it is somehow not neat. Actually, we can shorten the code by refactoring some duplicate code. And another trick we can play is to using current level and next level to replace the two different stack name. To do this we have to swap the two stack in the end of each iteration. At last, the int variable can be replaced by a bool, which can somehow save some space and looks more professional, haha~~

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>> ();
        if(root == null) return result;
       
        Stack<TreeNode> current = new Stack<TreeNode> ();
        Stack<TreeNode> nextlevel = new Stack<TreeNode> ();
        current.push(root);
        boolean leftToRight = true;
        while(!current.isEmpty()) {
            ArrayList<Integer> curRes = new ArrayList<Integer>();
               
            do {
                TreeNode cur = current.pop();
                curRes.add(cur.val);
                   
                if(leftToRight) {
                        if(cur.left!= null) nextlevel.push(cur.left);
                        if(cur.right != null) nextlevel.push(cur.right);
                } else {
                        if(cur.right!= null) nextlevel.push(cur.right);
                        if(cur.left != null) nextlevel.push(cur.left);
                }
            } while(!current.isEmpty());
           
            result.add(curRes);
            leftToRight = !leftToRight;
           
            Stack<TreeNode> temp = current;
            current = nextlevel;
            nextlevel = temp;
        }
        return result;
       
       
    }
} 
